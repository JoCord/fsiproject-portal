#!/bin/sh
#
#   cssh2cfg - create ssh files in server config dir from pool config
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.9 - 9.9.2016"
retc=0
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh

function help() {
   clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo " copy pool ssh files known_hosts and authorized_keys from pool dir to every"
   echo " xen server konfig dir"
   echo
   tput setaf 3
   echo "  Parameter:"
   tput sgr0
   echo "   -p <pool name>     poolname"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                 quiet mode"
   echo "   -0/1/2             info/debug/trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no pool "
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -p EDV_620_XA_01"
   echo
}


namepool=""
quietmode=""

while getopts ":p:l:hHq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "copy pool ssh files from pool dir to every xenserver"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "p")
         namepool=$OPTARG
         debmsg " pool: $namepool"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ -z $namepool ]; then
   help
   exit 2
fi


debmsg "Start $progname - $ver"

if [ $retc -eq 0 ]; then
   first=0
   for dirmac in $macdir/* ; do
      mac="${dirmac##*/}"
      mac=$(echo $mac | tr 'A-Z' 'a-z')
      if [[ $mac =~ $regex_mac ]]; then
         tracemsg " [$mac] used as config dir"
         if [ $retc -eq 0 ]; then
            pool="none"
            
            if [ -f "$dirmac/xen6.conf" ]; then
               . "$dirmac/xen6.conf"
            elif [ -f "$dirmac/xen7.conf" ]; then
               . "$dirmac/xen7.conf"
            fi

            if [ "$pool" != "none" ]; then
               tracemsg " pool in conf: $namepool"
               tracemsg " pool from cmd line: $pool"
               if [ "$namepool" == "$pool" ]; then
                  if [ $first -eq 0 ]; then
                     infmsg " copy pool [$pool] ssh files "
                     timestamp=$(date +%H:%M:%S)
                     datetimestamp=$(date +%Y.%m.%d)"-"${timestamp}
                     pidnr=$$
                     printf "%-8s INFO   :  copy pool [%s] ssh files" $timestamp $pool
                     first=1
                  fi
                  srcfile="$progdir/pool/known_host_$pool"
                  tracemsg " src file: $srcfile"
                  if [ -f $srcfile ]; then
                     command="/bin/cp -f $srcfile $dirmac/ssh/known_hosts"
                     tracemsg "  cmd: $command"
                     OUTPUT=$(2>&1 $command)
                     retc=$?
                     if [ $retc -eq 0 ]; then
                        echo -n "."
                     else 
                        echo ""
                        errmsg "cannot copy known_hosts rc=$retc"
                        errmsg "$OUTPUT"
                     fi
                  else
                     echo ""
                     errmsg "no src file found - abort"
                     retc=99
                  fi
                     
                  if [ $retc -eq 0 ]; then
                     srcfile="$progdir/pool/authorized_keys_$pool"
                     tracemsg " src file: $srcfile"
                     if [ -f $srcfile ]; then
                        command="/bin/cp -f $srcfile $dirmac/ssh/authorized_keys"
                        tracemsg "  cmd: $command"
                        OUTPUT=$(2>&1 $command)
                        retc=$?
                        if [ $retc -eq 0 ]; then
                           echo -n "*"
                        else 
                           echo ""
                           errmsg "cannot copy known_hosts rc=$retc"
                           errmsg "$OUTPUT"
                        fi
                     else 
                        echo ""
                        errmsg "no src file found - abort"
                        retc=99
                     fi
                  fi
               fi
            fi
         fi
      fi
   done
   if [ $first -eq 1 ]; then
      echo ""
   fi
fi

if [ $retc -eq 0 ]; then
   if [ $first -eq 1 ]; then
      infmsg " pool $namepool known_host and authorized_keys created"
   else
      infmsg " no pool $namepool known_hosts and authorized_keys found - ignore"
   fi
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc

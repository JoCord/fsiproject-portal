#!/bin/sh
#
#   getsrvinfo - get all info for given server
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.2 - 9.9.2016"
retc=0
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh

function help() {
   clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo "  search for all server data for given mac, ip or server hostname"
   echo
   tput setaf 3
   echo "  Parameter:"
   tput sgr0
   echo "   -s <server>       esxi server name to update"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                 quiet mode"
   echo "   -0/1/2             info/debug/trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no server enter "
   echo "    3 = no server config found"
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -s esx1.lab.local"
   echo "    $progname -s xen1"
   echo "    $progname -s 00-50-56-21-22-22"
   echo "    $progname -s 00:50:56:21:22:22"
   echo "    $progname -s 10.44.11.22"
   echo
}


server=""


while getopts ":s:l:hHq012c:" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "search for server config data"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "s")
         server="$OPTARG"
         debmsg " srv: $server"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ -z "$server" ]; then
   help
   exit 2
fi


debmsg "Start $progname - $ver"

get_srv_data $server
retc=$?
if [ $retc -eq 0 ]; then
   infmsg "$ls  found server data:"
   infmsg "$ls   server short..: $srv_shortname"
   infmsg "$ls   server fqdn...: $srv_fqdn"
   infmsg "$ls   server ip.....: $srv_ip"
   infmsg "$ls   server mac....: $srv_mac"
   infmsg "$ls   server rc.....: $srv_rctype"
   infmsg "$ls   server typ....: $srv_typ"
   infmsg "$ls   server tree...: $srv_tree"
   infmsg "$ls   ver...........: $srv_ver"
   infmsg "$ls   os main ver...: $srv_osmain"   
   infmsg "$ls   install user..: $srv_user"
   infmsg "$ls   install pw....: $srv_userpw"
   infmsg "$ls   install log...: $srv_log"
   infmsg "$ls   srv info path : $srv_info"
   infmsg "$ls   linux model...: $srv_model"
   infmsg "$ls   xen pool......: $srv_pool"
   infmsg "$ls   esxi vc.......: $srv_vc"
elif [ $retc -eq 1 ]; then
   warnmsg "$ls  no server config found"
   retc=3   
else
   errmsg "something wrong or I cannot find server"
   errmsg "rc=$retc"
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc




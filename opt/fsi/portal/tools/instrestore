#!/bin/sh
#
#   restore fsi install source
#
#   This program is free software; you can redistribute it and/or modify it under the
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program;
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.9 - 12.8.2016"
retc=0
ls=""
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]; do
   SOURCE="$(readlink "$SOURCE")"
   [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
   DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh
prgunzip="/usr/bin/unzip"

function help() {
   #clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"
   tput sgr0
   echo
   echo "  restore fsi install source"
   echo
   tput setaf 3
   echo "  Restore Dir Parameter:"
   tput sgr0
   echo "   -d <restore dir>   get backup files from this dir"
   echo
   tput setaf 3
   echo "  Job Parameter:"
   tput sgr0
   echo "   -e                restore all esxi source"
   echo "   -x                restore all xenserver source"
   echo "   -r                restore all linux redhat source"
   echo "   -c                restore all linux centos source"   
   echo "   -u                restore all esxi update source dirs"
   echo "   -p                restore all xenserver update source dirs"   
   echo "   -a                restore all"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                quiet mode"
   echo "   -0/1/2            info/debug/trace mode"
   echo "   -l <logfile>      other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no job given "
   echo "    3 = no restore dir given"
   echo "    5 = no $prgunzip found"
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -e -d /opt/meinbackup"
   echo "    $progname -a -d /opt/fsi/backup/fib-201608051400"
   echo
}


instesxi=0
instxen=0
instrh=0
instco=0
updxen=0
updesxi=0

basedir=""
backdir=""

if ! [ -f $prgunzip ]; then
   echo "no $prgunzip exist - abort"
   exit 5
fi

while getopts ":exrcaupd:l:hHq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "restore fsi install sources"
         exit 1
      ;;
      "h")
         help
         exit 1
      ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
      ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
      ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
      ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
      ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
      ;;
      "d")
         basedir="$OPTARG"
         debmsg " base dir: $basedir"
      ;;
      "e")
         instesxi=1
      ;;
      "x")
         instxen=1
      ;;
      "r")
         instrh=1
      ;;
      "p")
         updxen=1
      ;;
      "u")
         updesxi=1
      ;;
      "c")
         instco=1
      ;;
      "a")
         instesxi=1
         instxen=1
         instrh=1
         instco=1
         updxen=1
         updesxi=1
      ;;
      "?")
         errmsg "Unknown option $OPTARG"
      ;;
      ":")
         errmsg "No argument value for option $OPTARG"
      ;;
      *)
         # Should not occur
         errmsg "Unknown error while processing options"
      ;;
   esac
done

function restore_source() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "

   local sourcedir=$1
   tracemsg "$ls  backup source: $sourcedir"
   local targetdir=$2
   tracemsg "$ls  target dir: $targetdir"
   local what2rest=$3
   tracemsg "$ls  what2rest: $what2rest"
   

   dir_contains "$targetdir"
   contains=$?
   if [ $contains -eq 0 ]; then
      infmsg "$ls  target dir [$targetdir] not empty - add restore"
   elif [ $contains -eq 1 ]; then
      infmsg "$ls target dir [$targetdir] is empty"
   elif [ $contains -eq 2 ]; then
      infmsg "$ls target dir does not exist [$targetdir] - create"
      output=$(2>&1 mkdir -p $targetdir )
      retc=$?
      if [ $retc -ne 0 ]; then
         errmsg "error creating target dir [$targetdir]"
         errmsg "output:$output"
      fi
   else
      errmsg "error detecting [$targetdir]"
      retc=99
   fi

   if [ $retc -eq 0 ]; then
      for i in $(ls -d ${sourcedir}/${what2rest}* ); do 
         infmsg "$ls restore $i"
         cmd="$prgunzip -o $i -d $targetdir"
         tracemsg "$ls  cmd: $cmd"
         output=$(2>&1 $cmd)
         retc=$?
         if [ $retc -ne 0 ]; then
            errmsg "cannot restore $i - abort"
            break
         fi
      done
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}


if [ -z $basedir ]; then
   echo
   echo "ERROR: need dir to get backup files"
   echo
   help
   exit 3
fi

if [ $instesxi -eq 0 ] && [ $instxen -eq 0 ] && [ $instrh -eq 0 ] && [ $instco -eq 0 ] && [ $updxen -eq 0 ] && [ $updesxi -eq 0 ]; then
   help
   exit 2
fi


debmsg "Start $progname - $ver"

if [ $instesxi -eq 1 ]; then
   infmsg "$ls restore esxi source"
   restore_source "$basedir" "$progdir/../../pxe/img" "fsiimg_esxi"
   retc=$?
   if [ $retc -eq 0 ]; then
      restore_source "$basedir" "$progdir/../../inst" "fsiinst_esxi"
      retc=$?
   fi
fi

if [ $retc -eq 0 ]; then
   if [ $instxen -eq 1 ]; then
      infmsg "$ls restore xenserver source"
      restore_source "$basedir" "$progdir/../../pxe/img" "fsiimg_xen"
      retc=$?
      if [ $retc -eq 0 ]; then
         restore_source "$basedir" "$progdir/../../inst" "fsiinst_xen"
         retc=$?
      fi
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $instrh -eq 1 ]; then
      infmsg "$ls restore redhat source"
      restore_source "$basedir" "$progdir/../../pxe/img" "fsiimg_rh"
      retc=$?
      if [ $retc -eq 0 ]; then
         restore_source "$basedir" "$progdir/../../inst" "fsiinst_rh"
         retc=$?
      fi
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $instco -eq 1 ]; then
      infmsg "$ls backup centos source"
      restore_source "$basedir" "$progdir/../../pxe/img" "fsiimg_co"
      retc=$?
      if [ $retc -eq 0 ]; then
         restore_source "$basedir" "$progdir/../../inst" "fsiinst_co"
         retc=$?
      fi
   fi
fi

if [ $retc -eq 0 ]; then
   if [ $updxen -eq 1 ]; then
      infmsg "$ls restore xenserver update source dir"
      restore_source "$basedir" "$progdir/../../inst" "fsiupdxen"
      retc=$?
   fi
fi

if [ $retc -eq 0 ]; then
   if [ $updesxi -eq 1 ]; then
      infmsg "$ls backup esxi update source dir"
      restore_source "$basedir" "$progdir/../../inst" "fsiupdesxi"
      retc=$?
   fi
fi


SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc




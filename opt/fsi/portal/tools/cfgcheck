#!/bin/sh
#
#   check fsi portal and server configuration
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.1 - 6.9.2016"
retc=0
ls=""
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh

function help() {
   #clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo "  check configuration"
   echo
   tput setaf 3
   echo "  Server only parameter:"
   tput sgr0
   echo "   -s <server>       server to check config or ALL"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                quiet mode"
   echo "   -0/1/2            info/debug/trace mode"
   echo "   -l <logfile>      other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no server "
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -s esx1.lab.local"
   echo "    $progname -s esx1"
   echo "    $progname -s ALL"
   echo
}


server=""
model=""
tree=""
pool=""
vc=""
typ=""
nocheck=0

while getopts ":s:l:hHq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "check server configuration"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "s")
         server="$OPTARG"
         debmsg " srv: $server"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done


if [ -z "$server" ]; then
   help
   exit 2
fi

   
debmsg "Start $progname - $ver"

if [ "$server" == "ALL" ]; then
   for dirmac in $macdir/* ; do
      mac="${dirmac##*/}"
      mac=$(echo $mac | tr 'A-Z' 'a-z')
      if [[ ! $mac =~ $regex_mac ]]; then
         tracemsg "$ls [$mac] is not a valid MAC / Config directory - ignore"
      else
         get_srv_data $mac
         retc=$?
         if [ $retc -eq 0 ]; then
            infmsg "$ls  config for [$srv_fqdn] is ok"
         else
            errmsg "$ls  config wrong for [$srv_fqdn]/[$srv_shortname]/[$srv_mac]"
            debmsg "$ls  found server data:"
            debmsg "$ls   server short..: $srv_shortname"
            debmsg "$ls   server fqdn...: $srv_fqdn"
            debmsg "$ls   server ip.....: $srv_ip"
            debmsg "$ls   server mac....: $srv_mac"
            debmsg "$ls   server typ....: $srv_typ"
            debmsg "$ls   server tree...: $srv_tree"
            debmsg "$ls   ver...........: $srv_ver"
            debmsg "$ls   install user..: $srv_user"
            debmsg "$ls   install pw....: $srv_userpw"
            debmsg "$ls   install log...: $srv_log"
            debmsg "$ls   srv info path : $srv_info"
            debmsg "$ls   linux model...: $srv_model"
            debmsg "$ls   xen pool......: $srv_pool"
            debmsg "$ls   esxi vc.......: $srv_vc"
         fi            
      fi
   done
else
   get_srv_data $server
   retc=$?
   if [ $retc -eq 0 ]; then
      infmsg "$ls  config for [$server] is ok"
   else
      errmsg "$ls  config wrong for [$srv_fqdn]/[$srv_shortname]/[$srv_mac]"
      debmsg "$ls  found server data:"
      debmsg "$ls   server short..: $srv_shortname"
      debmsg "$ls   server fqdn...: $srv_fqdn"
      debmsg "$ls   server ip.....: $srv_ip"
      debmsg "$ls   server mac....: $srv_mac"
      debmsg "$ls   server typ....: $srv_typ"
      debmsg "$ls   server tree...: $srv_tree"
      debmsg "$ls   ver...........: $srv_ver"
      debmsg "$ls   install user..: $srv_user"
      debmsg "$ls   install pw....: $srv_userpw"
      debmsg "$ls   install log...: $srv_log"
      debmsg "$ls   srv info path : $srv_info"
      debmsg "$ls   linux model...: $srv_model"
      debmsg "$ls   xen pool......: $srv_pool"
      debmsg "$ls   esxi vc.......: $srv_vc"
   fi            
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc




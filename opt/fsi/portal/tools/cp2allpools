#!/bin/sh
#
#   cp2allpools - copy file to all server in all pools
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.4 - 9.9.2016"
retc=0
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh

function help() {
   clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo "  copy file to all server in all pools"
   echo
   tput setaf 3
   echo "  Parameter:"
   tput sgr0
   echo "   -g                 go and do work"
   echo "   -x <xen version>   only pools with xen version" 
   echo "   -s <source file>   source file"
   echo "   -t <target file>   target file on server"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                 quiet mode"
   echo "   -0/1/2             info/debug/trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    3 = no source file"
   echo "    4 = no target file"
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -g -s $instdir/xen620/ks/tools/fsiupdate -t /usr/bin/fsiupdate"
   echo "    $progname -g -x 620 -s $instdir/xen620/ks/tools/fsiupdate -t /usr/bin/fsiupdate"
   echo
}

go=0
sourcefile=""
targetfile=""
xenver=""
quietmode=""

while getopts ":l:s:t:x:ghH012q" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "copy file to all server in all pools"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "x")
         xenver="$OPTARG"
         debmsg " pool xen ver: $xenver"
        ;;
      "s")
         sourcefile=$OPTARG
         debmsg " source file: $sourcefile"
        ;;
      "t")
         targetfile=$OPTARG
         debmsg " target file: $targetfile"
        ;;
      "g")
         go=1
         debmsg " go"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ $go -eq 0 ]; then
   help
   exit 1
fi
if [ -z $sourcefile ]; then
   errmsg "no source file given"
   help
   exit 3
fi
if [ -z $targetfile ]; then
   errmsg "no target file given"
   help
   exit 4
fi
   
debmsg "Start $progname - $ver"

pools=()

if [ ! -z $xenver ]; then
   xenver="xen$xenver"
   infmsg " only pools with xen version: $xenver"
fi

if [ $retc -eq 0 ]; then
   for dirmac in $macdir/* ; do
      mac="${dirmac##*/}"
      mac=$(echo $mac | tr 'A-Z' 'a-z')
      if [[ ! $mac =~ $regex_mac ]]; then
         warnmsg " [$mac] is not a valid MAC / Config directory - ignore"
      else
         tracemsg " [$mac] used as config dir"
         pool="none"
         if [ -f "$dirmac/xen6.conf" ]; then
            . "$dirmac/xen6.conf"
         elif [ -f "$dirmac/xen7.conf" ]; then
            . "$dirmac/xen7.conf"
         fi 
            
         if [ "$pool" != "none" ]; then
            if [ ! -z $xenver ]; then
               xver=`cat $dirmac/xen6.pxe| grep -i "KERNEL"`
               xver=${xver%%/mboot*}
               xver=${xver##*img/}
               tracemsg " xen ver found: $xver"
               if [ "$xver" == "$xenver" ]; then
                  debmsg " found right xen version"
                  if [[ ${pools[*]} =~ $pool ]]; then
                     tracemsg " pool $pool already in array"
                  else
                     infmsg " Found new pool: $pool"
                     pools+=($pool)
                     "$progdir/cp2server" -p "$pool" -s "$sourcefile" -t "$targetfile" -l "$logfile"
                  fi
               else
                  debmsg " not xen version in pool"
               fi
            else
               if [[ ${pools[*]} =~ $pool ]]; then
                  tracemsg " pool $pool already in array"
               else
                  infmsg " Found new pool: $pool"
                  pools+=($pool)
                  "$progdir/cp2server" -p "$pool" -s "$sourcefile" -t "$targetfile" -l "$logfile"
               fi
            fi
         fi

      fi
   done
fi


SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc




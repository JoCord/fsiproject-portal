#!/bin/sh
#
#   restore fsi portal and server configuration
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.12 - 7.10.2016"
retc=0
ls=""
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh
prgunzip="/usr/bin/unzip"

function help() {
   #clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"
   tput sgr0
   echo
   echo "  restore fsi configuration"
   echo
   tput setaf 3
   echo "  Restore from dir parameter:"
   tput sgr0
   echo "   -d <base dir>     dir to get restore config archives"
   echo
   tput setaf 3
   echo "  Job Parameter:"
   tput sgr0
   echo "   -s                restore all server configs"
   echo "   -t                restore server templates"
   echo "   -c                restore server certificats"
   echo "   -p                restore all portal configs"
   echo "   -x                restore all xen pool configs"
   echo "   -i                restore install logs"
   echo "   -r                restore remote control configs"
   echo "   -a                restore all"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -e                erase before restore config, clean dirs"
   echo "   -o                erase only - no restore"
   echo "   -q                quiet mode"
   echo "   -0/1/2            info/debug/trace mode"
   echo "   -l <logfile>      other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no job given "
   echo "    3 = no restore dir given on command line"
   echo "    4 = no restore dir exist"
   echo "    5 = no $prgunzip found"
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -s -d /opt/backup/20160427"
   echo
}

cleandir=0
eraseonly=0
server=0
templates=0
certs=0
portal=0
xen=0
instlogs=0
rccfgs=0
restdir=""

function restore_zip() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   local ziparchiv=$1
   local dir2rest=$2
   local cleanfirst=$3
   local cleanonly=$4
   
   if [ "$ziparchiv" != "" ] && [ "$dir2rest" != "" ]; then
      dir_contains "$dir2rest"
      contains=$?
      if [ $contains -eq 0 ]; then
         if (( $cleanfirst )); then
            infmsg "$ls  target dir not empty - clean dir"
            out=$(2>&1 find "$dir2rest" -mindepth 1 -maxdepth 1 -type d -exec rm -rvf {} \;)
            retc=$?
            tracemsg "$ls  out=[$out]"
            if (( $retc )); then
               errmsg "cannot delete content of [$dir2rest] - abort"
               errmsg "output:$out"
            fi
         else
            infmsg "$ls  target dir not empty - but no clean first given - add restore"
         fi
      elif [ $contains -eq 1 ]; then
         warnmsg "$ls target dir is empty"
      elif [ $contains -eq 2 ]; then
         infmsg "$ls target dir does not exist [$dir2rest] - create"
         output=$(2>&1 mkdir -p $dir2rest)
         retc=$?
         if [ $retc -ne 0 ]; then
            errmsg "error creating target dir [$dir2rest]"
            errmsg "output:$output"
         fi
      else
         errmsg "error detecting $dir2rest"
         retc=99
      fi
      
      if !(( $cleanonly )); then
         if !(( $retc )); then
            if [ -f "$ziparchiv" ]; then
               infmsg "$ls found $ziparchiv - restore"
               tracemsg "$ls  unzip $ziparchiv in $dir2rest"
               output=$(2>&1 $prgunzip -o $ziparchiv -d $dir2rest)
               retc=$?
               tracemsg "$ls  rc=$retc"
               if (( $retc )); then
                  errmsg "cannot unzip $restdir/fsisrvportal to $dir2rest"
               fi
            else
               warnmsg "$ls no $ziparchiv found - ignore"
            fi
         fi
      else
         infmsg "$ls  only clean, no restore"
      fi
   else
      errmsg "paramter missing ziparchiv [$ziparchiv] / dir2rest [$dir2test]"
      retc=99
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}


function restore_server() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "

   local ziparchiv="$restdir/fsisrvportal.zip"
   if !(( $eraseonly )); then
      if [ -f "$ziparchiv" ]; then
         infmsg "$ls found $ziparchiv - restore portal remote control sys dir"
      else
         warnmsg "$ls no $ziparchiv found - ignore"
      fi
   fi
   if !(( $retc )); then   
      local dir2rest="$progdir/../etc/sys"
      restore_zip $ziparchiv $dir2rest $cleandir $eraseonly
      retc=$?
   fi

   if !(( $retc )); then
      local ziparchiv="$restdir/fsisrvpxe.zip"
      if !(( $eraseonly )); then
         if [ -f "$ziparchiv" ]; then
            infmsg "$ls found $ziparchiv - restore portal pxe sys dir"
         else
            warnmsg "$ls no $ziparchiv found - ignore"
         fi
      fi
      if !(( $retc )); then   
         local dir2rest="$progdir/../../pxe/sys"
         restore_zip $ziparchiv $dir2rest $cleandir $eraseonly
         retc=$?
      fi
   fi

   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

function restore_templates() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "

   ziparchiv="$restdir/fsitemp.zip"
   local dir2rest="$progdir/template"
   restore_zip $ziparchiv $dir2rest $cleandir $eraseonly
   retc=$?
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

function restore_certs() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   
   ziparchiv="$restdir/fsicert.zip"
   local dir2rest="$progdir/cert"
   restore_zip $ziparchiv $dir2rest $cleandir $eraseonly
   retc=$?

   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

function restore_xen() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   
   if (( $cleandir )); then
      infmsg "$ls only delete - no restore of xen pool config"
      
      infmsg "$ls  clean all existing install logs"
      out=$(for i in $(find "/opt/fsi/inst/"  -mindepth 1 -maxdepth 1 -type d -name 'xen*'); do find $i/ks/pool -mindepth 1 -maxdepth 1 -exec rm -rvf {} \; ;done)
      retc=$?
      tracemsg "$ls  out=[$out]"
      if (( $retc )); then
         errmsg "cannot delete content of xen pools - abort"
         errmsg "output:$out"
      fi
   fi
   if !(( $eraseonly )); then
      ziparchiv="$restdir/fsixenpool.zip"
      if [ -f "$ziparchiv" ]; then
         infmsg "$ls  found $ziparchiv - restore installation xenserver pool dir"
         local dir2rest="$progdir/../../inst"
         restore_zip $ziparchiv $dir2rest 0 0
         retc=$?
         if (( $retc )); then
            errmsg "cannot unpack xenpools configs"
         else
            infmsg "$ls  change ownership of dirs"
            out=$(for i in $(find "/opt/fsi/inst/"  -mindepth 1 -maxdepth 1 -type d -name 'xen*'); do chown -vR nfsnobody:nfsnobody $i/ks/pool/* 2>&1;done)
            if (( $retc )); then
               errmsg "cannot change owner of xen pools - abort"
               errmsg "output:$out"
            else
               tracemsg "out: $out"
            fi
         fi
      else
         warnmsg "$ls no $ziparchiv found - ignore"
      fi   
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

function restore_logs() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   
   if (( $cleandir )); then
      infmsg "$ls only delete - no restore of logs"
      
      infmsg "$ls  clean all existing install logs"
      out=$(for i in $(find "/opt/fsi/inst/" -mindepth 1 -maxdepth 1 -type d); do find $i/ks/log -mindepth 1 -maxdepth 1 -exec rm -rvf {} \; ;done)
      retc=$?
      tracemsg "$ls  out=[$out]"
      if (( $retc )); then
         errmsg "cannot delete content of [$dir2rest] - abort"
         errmsg "output:$out"
      else
         tracemsg "out: $out"
      fi
   fi
   if !(( $eraseonly )); then
      ziparchiv="$restdir/fsiinstlogs.zip"
      if [ -f "$ziparchiv" ]; then
         infmsg "$ls found $ziparchiv - restore installation log files dir"
         local dir2rest="$progdir/../../inst"
         restore_zip $ziparchiv $dir2rest 0 0
         retc=$?
         if (( $retc )); then
            errmsg "cannot unpack install logs"
         else
            infmsg "$ls  change ownership of dirs"
            out=$(for i in $(find "/opt/fsi/inst/"  -mindepth 1 -maxdepth 1 -type d); do chown -vR nfsnobody:nfsnobody $i/ks/log/* 2>&1;done)
            if (( $retc )); then
               errmsg "cannot change owner of install logs - abort"
               errmsg "output:$out"
            fi
         fi
      else
         warnmsg "$ls no $ziparchiv found - ignore"
      fi   
   fi   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

function restore_portal() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   
   ziparchiv="$restdir/fsiportal.zip"
   local dir2rest="$progdir/../etc"
   restore_zip $ziparchiv $dir2rest 0 0
   retc=$?
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

function restore_rccfgs() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   
   if (( $cleandir )); then
      infmsg "$ls  delete old rm.xml files"
      out=$(find /opt/fsi/portal/bin/ctrl -name 'rc.xml' -exec rm -rvf {} \;)
      retc=$?
      tracemsg "$ls  out=[$out]"
      if (( $retc )); then
         errmsg "cannot delete rc.xml - abort"
         errmsg "output:$out"
      fi
   fi   
   
   if !(( $eraseonly )); then
      ziparchiv="$restdir/fsirccfg.zip"
      infmsg "$ls found $ziparchiv - restore portal remote control dir"
      local dir2rest="$progdir/../bin/ctrl"
      restore_zip $ziparchiv $dir2rest $cleandir 0
      retc=$?
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}


if ! [ -f $prgunzip ]; then
   echo "no $prungzip exist - abort"
   exit 5
fi

while getopts ":eostcixprad:l:hHq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "restore fsi configuration"
         exit 1
      ;;
      "h")
         help
         exit 1
      ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
      ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
      ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
      ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
      ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
      ;;
      "d")
         restdir="$OPTARG"
         debmsg " restore dir: $restdir"
      ;;
      "e")
         cleandir=1
         debmsg " clean dir before restore"
      ;;
      "o")
         cleandir=1
         eraseonly=1
         debmsg " only clean dir, do not restore"
      ;;
      "s")
         server=1
      ;;
      "r")
         rccfgs=1
      ;;
      "t")
         templates=1
      ;;
      "i")
         instlogs=1
      ;;
      "x")
         xen=1
      ;;
      "c")
         certs=1
      ;;
      "p")
         portal=1
      ;;
      "a")
         server=1
         portal=1
         certs=1
         templates=1
         xen=1
         instlogs=1
         rccfgs=1
      ;;
      "?")
         errmsg "Unknown option $OPTARG"
      ;;
      ":")
         errmsg "No argument value for option $OPTARG"
      ;;
      *)
         # Should not occur
         errmsg "Unknown error while processing options"
      ;;
   esac
done


if [ -z "$restdir" ]; then
   if !(( $cleandir )) || !(( $eraseonly )); then
      help
      exit 3
   fi
fi

if [ $server -eq 0 ] && [ $templates -eq 0 ] && [ $certs -eq 0 ] && [ $portal -eq 0 ] && [ $xen -eq 0 ] && [ $instlogs -eq 0 ] && [ $rccfgs -eq 0 ]; then
   help
   exit 2
fi
   

debmsg "Start $progname - $ver"

if [ ! -d $restdir ]; then
   errmsg "Restore dir [$restdir] does not exist - abort"
   retc=4
fi

if [ $retc -eq 0 ]; then
   if [ $server -eq 1 ]; then
      infmsg "$ls restore server configs"
      restore_server
      retc=$?
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $templates -eq 1 ]; then
      infmsg "$ls restore templates"
      restore_templates
      retc=$?
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $certs -eq 1 ]; then
      infmsg "$ls restore certificates"
      restore_certs
      retc=$?
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $xen -eq 1 ]; then
      infmsg "$ls restore xen"
      restore_xen
      retc=$?
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $instlogs -eq 1 ]; then
      infmsg "$ls restore install logs"
      restore_logs
      retc=$?
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $portal -eq 1 ]; then
      infmsg "$ls restore portal configs"
      restore_portal
      retc=$?
   fi
fi
if [ $retc -eq 0 ]; then
   if [ $rccfgs -eq 1 ]; then
      infmsg "$ls restore remote control configs"
      restore_rccfgs
      retc=$?
   fi
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc




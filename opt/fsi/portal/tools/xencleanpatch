#!/bin/sh
#
#   xencleanpatch - clean installed patch temp dir
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.4 - 9.6.2016"
retc=0
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]; do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
. $progdir/etc/func.sh


function help() {
   clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo " clean old already installed patch files never needed"
   echo
   tput setaf 3
   echo "  Parameter:"
   tput sgr0
   echo "   -p <pool name>     poolname"
   echo "   -m <pool master>   pool master"
   echo "   -s <pool member>   any one server in pool"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                 quiet mode"
   echo "   -0/1/2             info/debug/trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no pool "
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -p EDV_620_XA_01"
   echo
}


function clean_pool() {
   local rc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "
   local poolmaster=$1
   local remoteuser=$2
   local remotepw=$3

   if [ -z $poolmaster ]; then
      rc=30
      errmsg "no pool master parameter given"
   elif [ -z $remoteuser ]; then
      rc=31
      errmsg "no remote user parameter given"
   elif [ -z $remotepw ]; then
      rc=32
      errmsg "no remote user password parameter given"
   fi

   if [ $rc -eq 0 ] ; then
      # needed for the following xe pool-list command
      export XE_EXTRA_ARGS="server=$poolmaster,port=443,username=$remoteuser,password=$remotepw"
      
      poollistout="$($xe pool-list params=name-label --minimal 2>&1)"
   fi
   
   if [ $rc -eq 0 ] ; then
      poolname=$poollistout
      infmsg "$ls  Clean patches from pool $poolname"
      
      IFS="," read -a patchuuids <<< "$(sshpass -p $remotepw ssh $g_ssh_options $remotepw@$poolmaster xe patch-list params=uuid --minimal)"
      for patchuuid in ${patchuuids[*]}; do
        infmsg "$ls  Execute patch-pool-clean for patch with UUID $patchuuid"
        patchpoolcleanout="$(sshpass -p $remotepw ssh $g_ssh_options $remotepw@$poolmaster xe patch-pool-clean uuid=$patchuuid 2>&1)"
        rc=$?
        if [ $rc -ne 0 ]; then
          errmsg "Return code of xe patch-pool-clean: $rc"
          errmsg "Error output: [$patchpoolcleanout]"
          rc=50
        else
          infmsg "$ls   clean ok"
          tracemsg "$ls   Output [$patchpoolcleanout]"
        fi
      done
      
      tracemsg "$ls  clean pool member"
      IFS="," read -a poolservers <<< "$(sshpass -p $remotepw ssh $g_ssh_options $remotepw@$poolmaster xe host-list params=name-label --minimal)"
      for poolserver in ${poolservers[*]}; do
         infmsg "$ls  Remove patch files from directory /var/patch on $poolserver"
         
         get_srv_data $poolserver
         retc=$?
         if [ $retc -eq 0 ] ; then
            delout=$(sshpass -p $srv_userpw ssh $g_ssh_options $srv_user@$poolserver "rm -v /var/patch/????????-????-????-????-???????????? 2>/dev/null")
            retc=$?
            if [ $retc -eq 0 ]; then
               infmsg "$ls   removing ok"
               tracemsg "$ls   output [$delout]"
            elif [ $retc -eq 1 ]; then
               infmsg "$ls   nothing to clean"
            else
               rc=$retc
               errmsg "cleaning $poolserver rc=$rc"
            fi
         fi         
      done
   fi

   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$rc"
   return $rc
}


namepool=""
poolmaster=""
anyserver=""

while getopts ":p:s:m:l:hHq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "clean old already installed patch files never needed"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "p")
         namepool=$OPTARG
         debmsg " pool: $namepool"
        ;;
      "m")
         poolmaster=$OPTARG
         debmsg " master: $poolmaster"
        ;;
      "s")
         anyserver=$OPTARG
         debmsg " server: $anyserver"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ -z $poolmaster ] && [ -z $namepool ] && [ -z $anyserver ]; then
   help
   exit 2
fi


infmsg "$ls Start $progname - $ver"

if [ $namepool ]; then
   poolmaster=$($progdir/findmaster -q -l $logfile -p $namepool)
   if [ "$poolmaster" == "" ]; then
      errmsg "cannot find master for [$namepool] - exit"
      exit 99
   else
      tracemsg "$ls  found master: $poolmaster"
   fi
elif [ $anyserver ]; then
   poolmaster=$($progdir/findmaster -q -l $logfile -m $anyserver)
   if [ "$poolmaster" == "" ]; then
      errmsg "cannot find master for [$anyserver] - exit"
      exit 98
   else
      tracemsg "$ls  found master: $poolmaster"
   fi
elif [ $poolmaster ]; then
   newmaster=$($progdir/findmaster -q -l $logfile -m $poolmaster)
   tracemsg "$ls  found master: $newmaster"
   if [ "$newmaster" == "$poolmaster" ]; then
      tracemsg "$ls  given master same as found: $poolmaster"
   elif [ "$newmaster" != "" ]; then
      tracemsg "$ls  given master not master in pool: $newmaster"
      poolmaster=$newmaster
   else
      errmsg "given master is not pool master and I cannot find a poolmaster [$poolmaster] - exit"
      exit 97
   fi
fi

if [ $retc -eq 0 ] ; then
   get_srv_data $poolmaster
   retc=$?
fi

if [ $retc -eq 0 ] ; then
   tracemsg "$ls found server data"
   
   srvonline $poolmaster
   retc=$?
   if [ $retc -ne 0 ] ; then
      errmsg "server $poolmaster not online - abort update"
      retc=3
   fi
fi

if [ $retc -eq 0 ] ; then
   clean_pool "$poolmaster" "$srv_user" "$srv_userpw"
   retc=$?
fi

infmsg "$ls End $progname - $ver - $retc"
exit $retc






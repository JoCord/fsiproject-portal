#!/bin/sh
#
#   cp2server - copy file to server in pool
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.7 - 1.11.2016"
retc=0
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh

function help() {
   clear
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo "  Copy file to all xenserver in pool"
   echo
   tput setaf 3
   echo "  Parameter:"
   tput sgr0
   echo "   -p <pool name>     poolname"
   echo "   -s <source file>   source file"
   echo "   -t <target file>   target file on server"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                 quiet mode"
   echo "   -0/1/2             info/debug/trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no pool "
   echo "    3 = no source file"
   echo "    4 = no target file"
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -p EDV_620_XA_01  -s $instdir/xen620/ks/tools/fsiupdate -t /usr/bin/fsiupdate"
   echo
}


namepool=""
sourcefile=""
targetfile=""
quietmode=""

while getopts ":s:t:p:l:hH012q" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "copy file to all xenserver in pool"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "s")
         sourcefile=$OPTARG
         debmsg " source file: $sourcefile"
        ;;
      "t")
         targetfile=$OPTARG
         debmsg " target file: $targetfile"
        ;;
      "p")
         namepool=$OPTARG
         debmsg " pool: $namepool"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ -z $namepool ] && [ -z $sourcefile ] && [ -z $targetfile ]; then
   help
   exit 1
fi
   
if [ -z $namepool ]; then
   errmsg "no pool given"
   help
   exit 2
fi
if [ -z $sourcefile ]; then
   errmsg "no source file given"
   help
   exit 3
fi
if [ -z $targetfile ]; then
   errmsg "no target file given"
   help
   exit 4
fi
debmsg "Start $progname - $ver"

debmsg "  pool: $namepool"
debmsg "  source: $sourcefile"
debmsg "  target: $targetfile"
cpcok=0

if [ $retc -eq 0 ]; then
   for dirmac in $macdir/* ; do
      mac="${dirmac##*/}"
      mac=$(echo $mac | tr 'A-Z' 'a-z')
      if [[ ! $mac =~ $regex_mac ]]; then
         warnmsg "[$mac] is not a valid MAC / Config directory - ignore"
      else
         tracemsg " [$mac] used as config dir"
         pool="none"
         
         if [ -f "$dirmac/xen6.conf" ]; then
            . "$dirmac/xen6.conf"
         elif [ -f "$dirmac/xen7.conf" ]; then
            . "$dirmac/xen7.conf"
         fi


         if [ "$namepool" == "$pool" ]; then
            infmsg " Found Server in pool: $pool"

            get_srv_data $mac
            retc=$?
            if [ $retc -eq 0 ]; then
               ping -c 1 $srv_ip >/dev/null 2>&1
               retc=$?
               # echo Server online: $retc
               if [ $retc -eq 0 ]; then
                  debmsg " server online"
                  if [ -f $sourcefile ]; then
                     infmsg " copy $sourcefile to $srv_shortname"
                     cmd='sshpass -p '$srv_userpw' scp '$g_ssh_options' '$sourcefile' root@'$srv_ip':'$targetfile
                     tracemsg "  cmd: $cmd"
                     OUTPUT=$(2>&1 $cmd )
                     retc=$?
                     if [ $retc -eq 0 ]; then
                        debmsg " ok"
                        cpcok=$((cpcok+1))
                     else
                        tracemsg "  output=[$OUTPUT]"
                        regex_remotechanged='*WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED*'
                        if [[ "$OUTPUT" =~ $regex_remotechanged ]] ; then
                           warnmsg " SSH Keys changed - delete old SSH Key"
                           OUTPUT=$(2>&1 sed '/$srv_ip/d' /root/.ssh/known_hosts)
                           retc=$?
                           if [ $retc -eq 0 ]; then
                              infmsg " try again copy known_hosts to $shortname"
                              OUTPUT=$(2>&1 $cmd)
                              retc=$?
                              if [ $retc -eq 0 ]; then
                                 debmsg " ok"
                                 cpcok=$((cpcok+1))
                              else
                                 warnmsg " cannot copy known_hosts rc=$retc"
                                 warnmsg "$OUTPUT"
                                 cpcfail=$((cpcfail+1))
                              fi                
                           else 
                             errmsg "cannot change /root known_hosts rc=$retc"
                             errmsg "$OUTPUT"
                             cpcfail=$((cpcfail+1))
                           fi
                        else
                           warnmsg " cannot copy known_hosts rc=$retc"
                           warnmsg "$OUTPUT"
                           cpcfail=$((cpcfail+1))
                        fi
                        
                     fi
                  else
                     errmsg "cannot find known_hosts for pool"
                     retc=99
                  fi
               else
                 warnmsg " server offline - ignore"
                 retc=0
                 cpcoff=$((cpcoff+1))
               fi
            else
               errmsg "cannot get data from server with mac [$mac]"
            fi
         fi
      fi
   done
fi

if [ $retc -eq 0 ]; then
   if [ $cpcok -eq 0 ]; then
      warnmsg "cannot find a server to copy ssh files"
   else
      infmsg " Succuesful copy: $cpcok"
      infmsg " Failed copy: $cpcfail"
      infmsg " XenSrv offline: $cpcoff"
   fi
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc




#!/bin/sh
#
#   change ntp server
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.2 - 03.03.2017"
retc=0
ls=""
progname=${0##*/}
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
SCRIPTSTART=$(date +%s.%N)
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done

export progdir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $progdir/etc/func.sh

function help() {
   echo
   tput setaf 2
   echo " Help for $progname - $ver"    
   tput sgr0
   echo
   echo "  change ntp server"
   echo
   tput setaf 3
   echo "  NTP Server parameter:"
   tput sgr0
   echo "   -n <server>[,<server>]   at least one ntp server"
   echo "   -o                       only change in config - not on server"
   echo
   tput setaf 3
   echo "  Server only parameter:"
   tput sgr0
   echo "   -s <server>              server to change"
   echo
   tput setaf 3
   echo "  Multiple server parameter:"
   tput sgr0
   echo "   -c <vc>                  change ntp on all esxi server on virtual center"
   echo "   -m <model>               change ntp on all linux server for model"
   echo "   -t <tree>                change ntp on all server for specify source tree"
   echo "   -y <typ>                 change ntp on all server for specify typ"
   echo "   -p <pool>                change ntp on all xen server in specify pool"
   echo
   tput setaf 3
   echo "  Optional Parameter:"
   tput sgr0
   echo "   -q                       quiet mode"
   echo "   -0/1/2                   info/debug/trace mode"
   echo "   -l <logfile>             other logfile"
   echo
   tput setaf 3
   echo "  Return Code:"
   tput sgr0
   echo "    1 = help"
   echo "    2 = no server "
   echo "    3 = no new ntp setting"
   echo "    > = different meaning"
   echo
   tput setaf 3
   echo "  Example:"
   tput sgr0
   echo "    $progname -s xensrv1.lab.local -n 172.16.1.3"
   echo "    $progname -c vcdev.lab.local -o -n 172.16.1.3"
   echo "    $progname -p EDV_620_XA_01 -n 172.16.1.3"
   echo
}


server=""
model=""
tree=""
pool=""
vc=""
typ=""
cfgonly=1
newntp=""


while getopts ":s:l:hHq012c:n:om:t:p:y:i" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "H")
         printf '%20s - %s\n' "$progname" "change ntp configuration on server and cfg files"
         exit 1
      ;;
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         #debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "s")
         server="$OPTARG"
         debmsg " srv: $server"
        ;;
      "n")
         newntp="$OPTARG"
         debmsg " new ntp srv: $newntp"
        ;;
      "c")
         vc="$OPTARG"
         debmsg " vc: $vc"
        ;;
      "m")
         model="$OPTARG"
         debmsg " model: $model"
        ;;
      "y")
         typ="$OPTARG"
         debmsg " typ: $typ"
        ;;
      "t")
         tree="$OPTARG"
         debmsg " source tree: $tree"
        ;;
      "p")
         pool="$OPTARG"
         debmsg " xen pool: $pool"
        ;;
      "o")
         cfgonly=0
         debmsg " change only in cfg"
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done


call_chntp_cfg() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "

   local newntp=$1
   local srvtyp=$2
   local cfgdir=$3
   local fqdnsrv=$4
   local srvosmain=$5
   
   
   if [ $retc -eq 0 ]; then
      case "$srvtyp" in
         "esxi")
            warnmsg "no supported"
           ;;
         "xen")
            infmsg "$ls change ntp config for $srv_fqdn"
            local xenxmlfile="$cfgdir/xen$srvosmain.xml"
            
            debmsg "$ls   remove all ntp server"
            OUTPUT=$(2>&1 sed -i '/<ntp-server/d' $xenxmlfile)
            retc=$?
            if [ $retc -eq 0 ]; then
               OLD_IFS=$IFS
               IFS=$','
               for i in $newntp; do
                  if [[ "$i" =~ $regex_ip_dns ]]; then
                     debmsg "$ls   add ntp server [$i]"
                     
                     OUTPUT=$(2>&1 sed -i '/.*installation>.*/i \<ntp-server\>'$i'\</ntp-server\>' $xenxmlfile)
                     retc=$?
                     if [ $retc -eq 0 ]; then
                        tracemsg "$ls  ntp server [$i] added"
                     else
                        errmsg "error adding ntp server [$i] to $xenxmlfile"
                        errmsg "out [$OUTPUT]"
                        break
                     fi
                  else
                     errmsg "no correct ip or dns [$i] - ignore"
                  fi
               done 
               IFS=$OLD_IFS
         
               if [ $retc -eq 0 ]; then
                  infmsg "$ls  change ntp in config [$newntp]"
               fi
            else
               errmsg "error removing ntp server lines from $xenxmlfile"
               errmsg "out [$OUTPUT]"
            fi
           ;;
         "co")
            warnmsg "no supported"
           ;;
         "rh")
            warnmsg "no supported"
           ;;
         *)
            errmsg "Unknown server type [$srvtyp] found."
            retc=2
           ;;
      esac   
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}

call_chntp_onsrv() {
   local retc=0
   tracemsg "$ls  Function [$FUNCNAME] startet"
   ls="$ls  "

   local newntp=$1
   local srvtyp=$2
   local srvfqdn=$3
   local srvuser=$4
   local srvuserpw=$5
   
   local cmd=""
   
   
   if [ $retc -eq 0 ]; then
      srvonline $srvfqdn
      retc=$?
      if [ $retc -ne 0 ] ; then
         warnmsg "$ls server $srvfqdn not online - ignore"
         retc=3
      else
         case "$srvtyp" in
            "esxi")
               warnmsg "no supported"
              ;;
            "xen")
               infmsg "$ls change ntp on $srvfqdn"
               cmd="sshpass -p $srvuserpw ssh $g_ssh_options $srvuser@$srvfqdn \"/bin/sh -l -c '/usr/bin/fsichntp "$quietmode" -n "$newntp"' \" 2>>$logfile"
              ;;
            "co")
               warnmsg "no supported"
              ;;
            "rh")
               warnmsg "no supported"
              ;;
            *)
               errmsg "Unknown server type [$srvtyp] found."
               retc=2
              ;;
         esac  
         if [ "$cmd" != "" ]; then
            infmsg "$ls start remote change on $srvfqdn now ..."
            tracemsg "$ls   cmd: $cmd"
            eval $cmd
            retc=$?
            if [ $retc -eq 0 ]; then
               tracemsg "$ls   ok"
            else
               errmsg "error running remote on $srvfqdn retc=$retc"
            fi
         fi
          
      fi
   fi
   
   ls=${ls:0:${#ls}-2}
   tracemsg "$ls  Function [$FUNCNAME] ended - rc=$retc"
   return $retc
}


if [ -z "$typ" ] && [ -z "$pool" ] && [ -z "$tree" ] && [ -z "$model" ] && [ -z "$vc" ] && [ -z "$server" ]; then
   help
   exit 2
fi
if [ "$newntp" == "" ]; then
   warnmsg "at least one new ntp server is needed - abort"
   help
   exit 3
fi

debmsg "Start $progname - $ver"

if [ -z "$server" ]; then
   for dirmac in $macdir/* ; do
      mac="${dirmac##*/}"
      mac=$(echo $mac | tr 'A-Z' 'a-z')
      if [[ ! $mac =~ $regex_mac ]]; then
         tracemsg "$ls [$mac] is not a valid MAC / Config directory - ignore"
      else
         get_srv_data $mac
         retc=$?
         if [ $retc -eq 0 ]; then
            if [ "$tree" != "" ] && [ "$tree" == "$srv_tree" ] && [ "$srv_tree" != "" ]; then
               infmsg "$ls  server $srv_shortname found for tree $srv_tree"
               call_chntp_cfg "$newntp" "$srv_typ" "$macdir/$srv_mac" "$srv_fqdn" "$srv_osmain"
               retc=$?
               if [ $cfgonly -eq 1 ]; then
                  call_chntp_onsrv "$newntp" "$srv_typ" "$srv_fqdn" "$srv_user" "$srv_userpw" 
                  retc=$?
               fi
            elif [ "$typ" != "" ] && [ "$typ" == "$srv_typ" ] && [ "$srv_typ" != "" ]; then
               infmsg "$ls  server $srv_shortname found for typ $srv_typ"
               call_chntp_cfg "$newntp" "$srv_typ" "$macdir/$srv_mac" "$srv_fqdn" "$srv_osmain"
               retc=$?
               if [ $cfgonly -eq 1 ]; then
                  call_chntp_onsrv "$newntp" "$srv_typ" "$srv_fqdn" "$srv_user" "$srv_userpw" 
                  retc=$?
               fi
            elif [ "$model" != "" ] && [ "$model" == "$srv_model" ] && [ "$srv_model" != "" ]; then
               infmsg "$ls  linux server $srv_shortname found for model $srv_model"
               call_chntp_cfg "$newntp" "$srv_typ" "$macdir/$srv_mac" "$srv_fqdn" "$srv_osmain"
               retc=$?
               if [ $cfgonly -eq 1 ]; then
                  call_chntp_onsrv "$newntp" "$srv_typ" "$srv_fqdn" "$srv_user" "$srv_userpw" 
                  retc=$?
               fi
            elif [ "$vc" != "" ] && [ "$vc" == "$srv_vc" ] && [ "$srv_vc" != "" ]; then
               infmsg "$ls  esxi server $srv_shortname found for vc $srv_vc"
               call_chntp_cfg "$newntp" "$srv_typ" "$macdir/$srv_mac" "$srv_fqdn" "$srv_osmain"
               retc=$?
               if [ $cfgonly -eq 1 ]; then
                  call_chntp_onsrv "$newntp" "$srv_typ" "$srv_fqdn" "$srv_user" "$srv_userpw" 
                  retc=$?
               fi
            elif [ "$pool" != "" ] && [ "$pool" == "$srv_pool" ] && [ "$srv_pool" != "" ]; then
               infmsg "$ls  xen server $srv_shortname found for pool $srv_pool"
               call_chntp_cfg "$newntp" "$srv_typ" "$macdir/$srv_mac" "$srv_fqdn" "$srv_osmain"
               retc=$?
               if [ $cfgonly -eq 1 ]; then
                  call_chntp_onsrv "$newntp" "$srv_typ" "$srv_fqdn" "$srv_user" "$srv_userpw" 
                  retc=$?
               fi
            else
               tracemsg "$ls  server $srv_shortname not in filter - ignore"
            fi
         fi
      fi
   done
else
   get_srv_data $server
   retc=$?
   if [ $retc -ne 0 ]; then
      warnmsg "$ls cannot find server data for $server - abort"
   else
      call_chntp_cfg "$newntp" "$srv_typ" "$macdir/$srv_mac" "$srv_fqdn" "$srv_osmain"
      retc=$?
      if [ $cfgonly -eq 1 ]; then
         call_chntp_onsrv "$newntp" "$srv_typ" "$srv_fqdn" "$srv_user" "$srv_userpw" 
         retc=$?
      fi
   fi
fi

SCRIPTEND=$(date +%s.%N)
runningtime=$(echo "$SCRIPTEND - $SCRIPTSTART" | bc)
debmsg "End $progname rc=$retc run=$runningtime"
exit $retc



